{"version":3,"file":"static/js/972.1e2e9d59.chunk.js","mappings":"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","sources":["webpack://ts-react-app-template/./src/components/pages/Admin/Admin.module.scss?4a69","components/pages/Admin/Admin.tsx","helpers/Form/contactForm.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"admin\":\"Admin_admin__-EZrJ\",\"title\":\"Admin_title__0SGDv\",\"form\":\"Admin_form__+kis9\",\"button\":\"Admin_button__+3r8p\"};","import React from 'react';\r\n\r\nimport { FieldValues, useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useMutation } from \"@tanstack/react-query\";\r\n\r\nimport Field from \"../../UI/Field/Field\";\r\nimport Button from \"../../UI/Button/Button\";\r\n\r\nimport { emailOptions, passwordOptions } from \"../../../helpers/Form/contactForm\";\r\nimport { ButtonTypeEnum, ButtonVariantEnum } from \"../../../ts/enums/enums\";\r\nimport { login } from \"../../../services/admin\";\r\nimport { useAppDispatch } from \"../../../hooks/common/redux\";\r\nimport { setAdminId, setAuth } from \"../../../redux/slices/adminSlice\";\r\n\r\nimport styles from './Admin.module.scss';\r\n\r\ninterface IAdminLogin {\r\n  email: string,\r\n  password: string\r\n}\r\n\r\nconst Admin: React.FC = () => {\r\n  const { register, handleSubmit, formState: { errors } } = useForm({ mode: \"onChange\" });\r\n\r\n  const navigate = useNavigate();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const mutation = useMutation({\r\n    mutationKey: ['loginAdmin'],\r\n    mutationFn: (data: IAdminLogin) => login(data.email, data.password),\r\n    onSuccess: (res) => {\r\n      const { accessToken, admin } = res.data;\r\n\r\n      localStorage.setItem('token', accessToken);\r\n\r\n      dispatch(setAuth(true));\r\n      dispatch(setAdminId(admin.adminId));\r\n      navigate('/');\r\n    },\r\n    onError: (error) => {\r\n      console.log(error);\r\n    }\r\n  });\r\n\r\n  const onSubmit = (formData: FieldValues) => {\r\n    const user = {\r\n      email: formData.email,\r\n      password: formData.password\r\n    };\r\n\r\n    mutation.mutate(user);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.admin}>\r\n      <h1 className={`title ${styles.title}`}>Admin panel authorization</h1>\r\n      <form className={styles.form} onSubmit={handleSubmit(onSubmit)}>\r\n        <Field\r\n          label=\"Email\"\r\n          placeholder=\"admin@gmail.com\"\r\n          name=\"email\"\r\n          register={register}\r\n          error={typeof errors?.email?.message === 'string' ? errors?.email?.message : ''}\r\n          options={emailOptions}\r\n        />\r\n        <Field\r\n          label=\"Password\"\r\n          placeholder=\"Enter your password\"\r\n          name=\"password\"\r\n          register={register}\r\n          error={typeof errors?.password?.message === 'string' ? errors?.password?.message : ''}\r\n          options={passwordOptions}\r\n          password={true}\r\n        />\r\n        <Button variant={ButtonVariantEnum.Filled} type={ButtonTypeEnum.Submit} customClassName={styles.button}>Login</Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Admin;\r\n","import { isValidPhoneNumber } from \"react-phone-number-input\";\r\n\r\nexport const nameOptions = {\r\n  required: 'Required field',\r\n  maxLength: {\r\n    value: 32,\r\n    message: 'Maximum 32 characters'\r\n  },\r\n  minLength: {\r\n    value: 2,\r\n    message: 'Minimum 2 characters'\r\n  }\r\n};\r\n\r\nexport const emailOptions = {\r\n  required: 'Required field',\r\n  pattern: {\r\n    value: /\\S+@\\S+\\.\\S+/,\r\n    message: 'Invalid email format',\r\n  }\r\n};\r\n\r\nconst validatePhoneNumber = (value: string) => {\r\n  if (isValidPhoneNumber(value)) {\r\n    return true;\r\n  } else {\r\n    return 'Enter the correct phone number';\r\n  }\r\n};\r\n\r\n/*export const phoneOptions = {\r\n  required: 'Required field',\r\n  validate: { validatePhoneNumber }\r\n};*/\r\n\r\nexport const contactTextOptions = {\r\n  required: 'Required field',\r\n  maxLength: {\r\n    value: 1024,\r\n    message: 'Maximum 1024 characters'\r\n  },\r\n  minLength: {\r\n    value: 32,\r\n    message: 'Minimum 32 characters'\r\n  }\r\n};\r\n\r\nexport const passwordOptions = {\r\n  required: 'Required field',\r\n  maxLength: {\r\n    value: 32,\r\n    message: 'Maximum 32 characters'\r\n  },\r\n  minLength: {\r\n    value: 8,\r\n    message: 'Minimum 8 characters'\r\n  },\r\n  validate: (value: any) => {\r\n    if (!/[0-9]/.test(value)) {\r\n      return 'Password must contain a number';\r\n    }\r\n    if (!/[a-z]/.test(value)) {\r\n      return 'Password must contain a lowercase letter';\r\n    }\r\n    if (!/[A-Z]/.test(value)) {\r\n      return 'Password must contain an uppercase letter';\r\n    }\r\n    if (!/[^\\w]/.test(value)) {\r\n      return 'Password must contain a symbol';\r\n    }\r\n    return true;\r\n  }\r\n};\r\n\r\nexport const goToContact = () => {\r\n  const element = document.getElementById('contact');\r\n  element?.scrollIntoView({ behavior: 'smooth' });\r\n};\r\n"],"names":["Admin","_errors$email","_errors$email2","_errors$password","_errors$password2","register","handleSubmit","formState","errors","useForm","mode","navigate","useNavigate","dispatch","useAppDispatch","mutation","useMutation","mutationKey","mutationFn","data","login","email","password","onSuccess","res","accessToken","admin","localStorage","setItem","setAuth","setAdminId","adminId","onError","error","console","log","_jsxs","className","styles","children","_jsx","concat","onSubmit","formData","user","mutate","Field","label","placeholder","name","message","options","emailOptions","passwordOptions","Button","variant","ButtonVariantEnum","Filled","type","ButtonTypeEnum","Submit","customClassName","nameOptions","required","maxLength","value","minLength","pattern","contactTextOptions","validate","test","goToContact","element","document","getElementById","scrollIntoView","behavior"],"sourceRoot":""}