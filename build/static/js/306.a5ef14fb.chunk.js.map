{"version":3,"file":"static/js/306.a5ef14fb.chunk.js","mappings":"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","sources":["../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts","../node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","../node_modules/react-hook-form/src/utils/isDateObject.ts","../node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","../node_modules/react-hook-form/src/utils/isObject.ts","../node_modules/react-hook-form/src/logic/getEventValue.ts","../node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","../node_modules/react-hook-form/src/logic/getNodeParentName.ts","../node_modules/react-hook-form/src/utils/isPlainObject.ts","../node_modules/react-hook-form/src/utils/isWeb.ts","../node_modules/react-hook-form/src/utils/cloneObject.ts","../node_modules/react-hook-form/src/utils/compact.ts","../node_modules/react-hook-form/src/utils/isUndefined.ts","../node_modules/react-hook-form/src/utils/get.ts","../node_modules/react-hook-form/src/utils/isBoolean.ts","../node_modules/react-hook-form/src/utils/isKey.ts","../node_modules/react-hook-form/src/utils/stringToPath.ts","../node_modules/react-hook-form/src/utils/set.ts","../node_modules/react-hook-form/src/constants.ts","../node_modules/react-hook-form/src/useFormContext.tsx","../node_modules/react-hook-form/src/logic/getProxyFormState.ts","../node_modules/react-hook-form/src/utils/isEmptyObject.ts","../node_modules/react-hook-form/src/logic/shouldRenderFormState.ts","../node_modules/react-hook-form/src/utils/convertToArrayPayload.ts","../node_modules/react-hook-form/src/useSubscribe.ts","../node_modules/react-hook-form/src/utils/isString.ts","../node_modules/react-hook-form/src/logic/generateWatchOutput.ts","../node_modules/react-hook-form/src/logic/appendErrors.ts","../node_modules/react-hook-form/src/logic/getValidationModes.ts","../node_modules/react-hook-form/src/logic/isWatched.ts","../node_modules/react-hook-form/src/logic/iterateFieldsByAction.ts","../node_modules/react-hook-form/src/logic/updateFieldArrayRootError.ts","../node_modules/react-hook-form/src/utils/isFileInput.ts","../node_modules/react-hook-form/src/utils/isFunction.ts","../node_modules/react-hook-form/src/utils/isHTMLElement.ts","../node_modules/react-hook-form/src/utils/isMessage.ts","../node_modules/react-hook-form/src/utils/isRadioInput.ts","../node_modules/react-hook-form/src/utils/isRegex.ts","../node_modules/react-hook-form/src/logic/getCheckboxValue.ts","../node_modules/react-hook-form/src/logic/getRadioValue.ts","../node_modules/react-hook-form/src/logic/getValidateError.ts","../node_modules/react-hook-form/src/logic/getValueAndMessage.ts","../node_modules/react-hook-form/src/logic/validateField.ts","../node_modules/react-hook-form/src/utils/unset.ts","../node_modules/react-hook-form/src/utils/createSubject.ts","../node_modules/react-hook-form/src/utils/isPrimitive.ts","../node_modules/react-hook-form/src/utils/deepEqual.ts","../node_modules/react-hook-form/src/utils/isMultipleSelect.ts","../node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","../node_modules/react-hook-form/src/utils/live.ts","../node_modules/react-hook-form/src/utils/objectHasFunction.ts","../node_modules/react-hook-form/src/logic/getDirtyFields.ts","../node_modules/react-hook-form/src/logic/getFieldValueAs.ts","../node_modules/react-hook-form/src/logic/getFieldValue.ts","../node_modules/react-hook-form/src/logic/getResolverOptions.ts","../node_modules/react-hook-form/src/logic/getRuleValue.ts","../node_modules/react-hook-form/src/logic/hasValidation.ts","../node_modules/react-hook-form/src/logic/schemaErrorLookup.ts","../node_modules/react-hook-form/src/logic/skipValidation.ts","../node_modules/react-hook-form/src/logic/unsetEmptyArray.ts","../node_modules/react-hook-form/src/logic/createFormControl.ts","../node_modules/react-hook-form/src/useForm.ts"],"sourcesContent":["import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    } else if (this.#currentMutation?.state.status === 'pending') {\n      this.#currentMutation.setOptions(this.options)\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport { MutationObserver, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { noop, shouldThrowError } from './utils'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown): value is object =>\n  typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  names.has(getNodeParentName(name));\n","export default (name: string) =>\n  name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n","import isObject from './isObject';\n\nexport default (tempObject: object) => {\n  const prototypeCopy =\n    tempObject.constructor && tempObject.constructor.prototype;\n\n  return (\n    isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf')\n  );\n};\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isObject from './isObject';\nimport isPlainObject from './isPlainObject';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (\n    !(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n    (isArray || isObject(data))\n  ) {\n    copy = isArray ? [] : {};\n\n    if (!isArray && !isPlainObject(data)) {\n      copy = data;\n    } else {\n      for (const key in data) {\n        if (data.hasOwnProperty(key)) {\n          copy[key] = cloneObject(data[key]);\n        }\n      }\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(object: T, path?: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(object)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    object,\n  );\n\n  return isUndefined(result) || result === object\n    ? isUndefined(object[path as keyof T])\n      ? defaultValue\n      : object[path as keyof T]\n    : result;\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default (object: FieldValues, path: string, value?: unknown) => {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n\n    if (key === '__proto__') {\n      return;\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n};\n","export const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n} as const;\n\nexport const VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n} as const;\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n} as const;\n","import React from 'react';\n\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TransformedValues extends FieldValues | undefined = undefined,\n>(): UseFormReturn<TFieldValues, TContext, TransformedValues> =>\n  React.useContext(HookFormContext) as UseFormReturn<\n    TFieldValues,\n    TContext,\n    TransformedValues\n  >;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TTransformedValues extends FieldValues | undefined = undefined,\n>(\n  props: FormProviderProps<TFieldValues, TContext, TTransformedValues>,\n) => {\n  const { children, ...data } = props;\n  return (\n    <HookFormContext.Provider value={data as unknown as UseFormReturn}>\n      {children}\n    </HookFormContext.Provider>\n  );\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Control, FieldValues, FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues extends FieldValues, TContext = any>(\n  formState: FormState<TFieldValues>,\n  control: Control<TFieldValues, TContext>,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {\n    defaultValues: control._defaultValues,\n  } as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n          control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport {\n  Control,\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  ReadFormState,\n} from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T extends FieldValues, K extends ReadFormState>(\n  formStateData: Partial<FormState<T>> & { name?: InternalFieldName },\n  _proxyFormState: K,\n  updateFormState: Control<T>['_updateFormState'],\n  isRoot?: boolean,\n) => {\n  updateFormState(formStateData);\n  const { name, ...formState } = formStateData;\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import React from 'react';\n\nimport { Subject } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  next: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const subscription =\n      !props.disabled &&\n      _props.current.subject &&\n      _props.current.subject.subscribe({\n        next: _props.current.next,\n      });\n\n    return () => {\n      subscription && subscription.unsubscribe();\n    };\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { DeepPartial, FieldValues, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default <T>(\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n  defaultValue?: DeepPartial<T> | unknown,\n) => {\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names, defaultValue);\n  }\n\n  if (Array.isArray(names)) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n\n  return formValues;\n};\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode, ValidationModeFlags } from '../types';\n\nexport default (mode?: Mode): ValidationModeFlags => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import { FieldRefs, InternalFieldName, Ref } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\n\nconst iterateFieldsByAction = (\n  fields: FieldRefs,\n  action: (ref: Ref, name: string) => 1 | undefined | void,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[] | 0,\n  abortEarly?: boolean,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const { _f, ...currentField } = field;\n\n      if (_f) {\n        if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n          break;\n        } else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n          break;\n        } else {\n          iterateFieldsByAction(currentField, action);\n        }\n      } else if (isObject(currentField)) {\n        iterateFieldsByAction(currentField, action);\n      }\n    }\n  }\n};\n\nexport default iterateFieldsByAction;\n","import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport compact from '../utils/compact';\nimport get from '../utils/get';\nimport set from '../utils/set';\n\nexport default <T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  error: Partial<Record<string, FieldError>>,\n  name: InternalFieldName,\n): FieldErrors<T> => {\n  const fieldArrayErrors = compact(get(errors, name));\n  set(fieldArrayErrors, 'root', error[name]);\n  set(errors, name, fieldArrayErrors);\n  return errors;\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isWeb from './isWeb';\n\nexport default (value: unknown): value is HTMLElement => {\n  if (!isWeb) {\n    return false;\n  }\n\n  const owner = value ? ((value as HTMLElement).ownerDocument as Document) : 0;\n  return (\n    value instanceof\n    (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement)\n  );\n};\n","import { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message => isString(value);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  FieldValues,\n  InternalFieldErrors,\n  MaxType,\n  Message,\n  MinType,\n  NativeFieldValue,\n} from '../types';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends FieldValues>(\n  field: Field,\n  formValues: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n  isFieldArray?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  const inputValue: NativeFieldValue = get(formValues, name);\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) &&\n      isUndefined(ref.value) &&\n      isUndefined(inputValue)) ||\n    (isHTMLElement(ref) && ref.value === '') ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType: MaxType = INPUT_VALIDATION_RULES.maxLength,\n    minType: MinType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    isFieldArray\n      ? !Array.isArray(inputValue) || !inputValue.length\n      : required &&\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n          (isBoolean(inputValue) && !inputValue) ||\n          (isCheckBox && !getCheckboxValue(refs).isValid) ||\n          (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        (inputValue ? +inputValue : inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      const convertTimeToDate = (time: unknown) =>\n        new Date(new Date().toDateString() + ' ' + time);\n      const isTime = ref.type == 'time';\n      const isWeek = ref.type == 'week';\n\n      if (isString(maxOutput.value) && inputValue) {\n        exceedMax = isTime\n          ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n          : isWeek\n          ? inputValue > maxOutput.value\n          : valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value) && inputValue) {\n        exceedMin = isTime\n          ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n          : isWeek\n          ? inputValue < minOutput.value\n          : valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (\n    (maxLength || minLength) &&\n    !isEmpty &&\n    (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))\n  ) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > +maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < +minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue, formValues);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue, formValues),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction isEmptyArray(obj: unknown[]) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default function unset(object: any, path: string | (string | number)[]) {\n  const paths = Array.isArray(path)\n    ? path\n    : isKey(path)\n    ? [path]\n    : stringToPath(path);\n\n  const childObject = paths.length === 1 ? object : baseGet(object, paths);\n\n  const index = paths.length - 1;\n  const key = paths[index];\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  if (\n    index !== 0 &&\n    ((isObject(childObject) && isEmptyObject(childObject)) ||\n      (Array.isArray(childObject) && isEmptyArray(childObject)))\n  ) {\n    unset(object, paths.slice(0, -1));\n  }\n\n  return object;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default <T>(): Subject<T> => {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next && observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n};\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<T>(data: T, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: Record<\n    Extract<keyof T, string>,\n    ReturnType<typeof markFieldsDirty> | boolean\n  >,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : value\n      ? +value\n      : value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup<T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import { ValidationModeFlags } from '../types';\n\nexport default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<ValidationModeFlags>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  Control,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport getValidationModes from './getValidationModes';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport iterateFieldsByAction from './iterateFieldsByAction';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport updateFieldArrayRootError from './updateFieldArrayRootError';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    submitCount: 0,\n    isDirty: false,\n    isLoading: isFunction(_options.defaultValues),\n    isValidating: false,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    touchedFields: {},\n    dirtyFields: {},\n    validatingFields: {},\n    errors: _options.errors || {},\n    disabled: _options.disabled || false,\n  };\n  let _fields: FieldRefs = {};\n  let _defaultValues =\n    isObject(_options.defaultValues) || isObject(_options.values)\n      ? cloneObject(_options.defaultValues || _options.values) || {}\n      : {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _state = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  };\n  let delayErrorCallback: DelayCallback | null;\n  let timer = 0;\n  const _proxyFormState: ReadFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    validatingFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    values: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T) =>\n    (wait: number) => {\n      clearTimeout(timer);\n      timer = setTimeout(callback, wait);\n    };\n\n  const _updateValid = async (shouldUpdateValid?: boolean) => {\n    if (_proxyFormState.isValid || shouldUpdateValid) {\n      const isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuiltInValidation(_fields, true);\n\n      if (isValid !== _formState.isValid) {\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n  };\n\n  const _updateIsValidating = (names?: string[], isValidating?: boolean) => {\n    if (_proxyFormState.isValidating || _proxyFormState.validatingFields) {\n      (names || Array.from(_names.mount)).forEach((name) => {\n        if (name) {\n          isValidating\n            ? set(_formState.validatingFields, name, isValidating)\n            : unset(_formState.validatingFields, name);\n        }\n      });\n\n      _subjects.state.next({\n        validatingFields: _formState.validatingFields,\n        isValidating: !isEmptyObject(_formState.validatingFields),\n      });\n    }\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method) {\n      _state.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        name,\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const _setErrors = (errors: FieldErrors<TFieldValues>) => {\n    _formState.errors = errors;\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: false,\n    });\n  };\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _state.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let shouldUpdateField = false;\n    let isPreviousDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const disabledField = !!(\n      get(_fields, name) &&\n      get(_fields, name)._f &&\n      get(_fields, name)._f.disabled\n    );\n\n    if (!isBlurEvent || shouldDirty) {\n      if (_proxyFormState.isDirty) {\n        isPreviousDirty = _formState.isDirty;\n        _formState.isDirty = output.isDirty = _getDirty();\n        shouldUpdateField = isPreviousDirty !== output.isDirty;\n      }\n\n      const isCurrentFieldPristine =\n        disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n\n      isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n      isCurrentFieldPristine || disabledField\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      shouldUpdateField =\n        shouldUpdateField ||\n        (_proxyFormState.dirtyFields &&\n          isPreviousDirty !== !isCurrentFieldPristine);\n    }\n\n    if (isBlurEvent) {\n      const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n      if (!isPreviousFieldTouched) {\n        set(_formState.touchedFields, name, isBlurEvent);\n        output.touchedFields = _formState.touchedFields;\n        shouldUpdateField =\n          shouldUpdateField ||\n          (_proxyFormState.touchedFields &&\n            isPreviousFieldTouched !== isBlurEvent);\n      }\n    }\n\n    shouldUpdateField && shouldRender && _subjects.state.next(output);\n\n    return shouldUpdateField ? output : {};\n  };\n\n  const shouldRenderByError = (\n    name: InternalFieldName,\n    isValid?: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid &&\n      isBoolean(isValid) &&\n      _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback = debounce(() => updateErrors(name, error));\n      delayErrorCallback(props.delayError);\n    } else {\n      clearTimeout(timer);\n      delayErrorCallback = null;\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n      !isEmptyObject(fieldState) ||\n      shouldUpdateValid\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) => {\n    _updateIsValidating(name, true);\n    const result = await _options.resolver!(\n      _formValues as TFieldValues,\n      _options.context,\n      getResolverOptions(\n        name || _names.mount,\n        _fields,\n        _options.criteriaMode,\n        _options.shouldUseNativeValidation,\n      ),\n    );\n    _updateIsValidating(name);\n    return result;\n  };\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema(names);\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuiltInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context: {\n      valid: boolean;\n    } = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const { _f, ...fieldValue } = field;\n\n        if (_f) {\n          const isFieldArrayRoot = _names.array.has(_f.name);\n          _updateIsValidating([name], true);\n          const fieldError = await validateField(\n            field,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation && !shouldOnlyCheckValid,\n            isFieldArrayRoot,\n          );\n          _updateIsValidating([name]);\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          !shouldOnlyCheckValid &&\n            (get(fieldError, _f.name)\n              ? isFieldArrayRoot\n                ? updateFieldArrayRootError(\n                    _formState.errors,\n                    fieldError,\n                    _f.name,\n                  )\n                : set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name));\n        }\n\n        fieldValue &&\n          (await executeBuiltInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) =>\n    generateWatchOutput(\n      names,\n      _names,\n      {\n        ...(_state.mount\n          ? _formValues\n          : isUndefined(defaultValue)\n          ? _defaultValues\n          : isString(names)\n          ? { [names]: defaultValue }\n          : defaultValue),\n      },\n      isGlobal,\n      defaultValue,\n    );\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _state.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (optionRef) =>\n              (optionRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(optionRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.values.next({\n              name,\n              values: { ..._formValues },\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U extends SetValueConfig,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: { ..._formValues },\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _subjects.state.next({\n          name,\n          dirtyFields: getDirtyFields(_defaultValues, _formValues),\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({ ..._formState });\n    _subjects.values.next({\n      name: _state.mount ? name : undefined,\n      values: { ..._formValues },\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    _state.mount = true;\n    const target = event.target;\n    let name = target.name as string;\n    let isFieldValueUpdated = true;\n    const field: Field = get(_fields, name);\n    const getCurrentFieldValue = () =>\n      target.type ? getFieldValue(field._f) : getEventValue(event);\n    const _updateIsFieldValueUpdated = (fieldValue: any): void => {\n      isFieldValueUpdated =\n        Number.isNaN(fieldValue) ||\n        fieldValue === get(_formValues, name, fieldValue);\n    };\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = getCurrentFieldValue();\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n        delayErrorCallback && delayErrorCallback(0);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.values.next({\n          name,\n          type: event.type,\n          values: { ..._formValues },\n        });\n\n      if (shouldSkipValidation) {\n        _proxyFormState.isValid && _updateValid();\n\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n\n        _updateIsFieldValueUpdated(fieldValue);\n\n        if (isFieldValueUpdated) {\n          const previousErrorLookupResult = schemaErrorLookup(\n            _formState.errors,\n            _fields,\n            name,\n          );\n          const errorLookupResult = schemaErrorLookup(\n            errors,\n            _fields,\n            previousErrorLookupResult.name || name,\n          );\n\n          error = errorLookupResult.error;\n          name = errorLookupResult.name;\n\n          isValid = isEmptyObject(errors);\n        }\n      } else {\n        _updateIsValidating([name], true);\n        error = (\n          await validateField(\n            field,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n        _updateIsValidating([name]);\n\n        _updateIsFieldValueUpdated(fieldValue);\n\n        if (isFieldValueUpdated) {\n          if (error) {\n            isValid = false;\n          } else if (_proxyFormState.isValid) {\n            isValid = await executeBuiltInValidation(_fields, true);\n          }\n        }\n      }\n\n      if (isFieldValueUpdated) {\n        field._f.deps &&\n          trigger(\n            field._f.deps as\n              | FieldPath<TFieldValues>\n              | FieldPath<TFieldValues>[],\n          );\n        shouldRenderByError(name, isValid, error, fieldState);\n      }\n    }\n  };\n\n  const _focusInput = (ref: Ref, key: string) => {\n    if (get(_formState.errors, key) && ref.focus) {\n      ref.focus();\n      return 1;\n    }\n    return;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuiltInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuiltInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver || !name ? { isValid } : {}),\n      errors: _formState.errors,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      iterateFieldsByAction(\n        _fields,\n        _focusInput,\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...(_state.mount ? _formValues : _defaultValues),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames)\n      : fieldNames.map((name) => get(values, name));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    error: get((formState || _formState).errors, name),\n    isValidating: !!get(_formState.validatingFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name &&\n      convertToArrayPayload(name).forEach((inputName) =>\n        unset(_formState.errors, inputName),\n      );\n\n    _subjects.state.next({\n      errors: name ? _formState.errors : {},\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n    const currentError = get(_formState.errors, name) || {};\n\n    // Don't override existing error messages elsewhere in the object tree.\n    const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n\n    set(_formState.errors, name, {\n      ...restOfErrorTree,\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: DeepPartial<TFieldValues>,\n  ) =>\n    isFunction(name)\n      ? _subjects.values.subscribe({\n          next: (payload) =>\n            name(\n              _getWatch(undefined, defaultValue),\n              payload as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (!options.keepValue) {\n        unset(_fields, fieldName);\n        unset(_formValues, fieldName);\n      }\n\n      !options.keepError && unset(_formState.errors, fieldName);\n      !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n      !options.keepTouched && unset(_formState.touchedFields, fieldName);\n      !options.keepIsValidating &&\n        unset(_formState.validatingFields, fieldName);\n      !_options.shouldUnregister &&\n        !options.keepDefaultValue &&\n        unset(_defaultValues, fieldName);\n    }\n\n    _subjects.values.next({\n      values: { ..._formValues },\n    });\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const _updateDisabledField: Control<TFieldValues>['_updateDisabledField'] = ({\n    disabled,\n    name,\n    field,\n    fields,\n    value,\n  }) => {\n    if ((isBoolean(disabled) && _state.mount) || !!disabled) {\n      const inputValue = disabled\n        ? undefined\n        : isUndefined(value)\n        ? getFieldValue(field ? field._f : get(fields, name)._f)\n        : value;\n      set(_formValues, name, inputValue);\n      updateTouchAndDirty(name, inputValue, false, false, true);\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      ...(field || {}),\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    if (field) {\n      _updateDisabledField({\n        field,\n        disabled: options.disabled,\n        name,\n        value: options.value,\n      });\n    } else {\n      updateValidAndValue(name, true, options.value);\n    }\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.progressive\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [\n                      ...refs.filter(live),\n                      fieldRef,\n                      ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                    ],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _state.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const _focusError = () =>\n    _options.shouldFocusError &&\n    iterateFieldsByAction(_fields, _focusInput, _names.mount);\n\n  const _disableForm = (disabled?: boolean) => {\n    if (isBoolean(disabled)) {\n      _subjects.state.next({ disabled });\n      iterateFieldsByAction(\n        _fields,\n        (ref, name) => {\n          const currentField: Field = get(_fields, name);\n          if (currentField) {\n            ref.disabled = currentField._f.disabled || disabled;\n\n            if (Array.isArray(currentField._f.refs)) {\n              currentField._f.refs.forEach((inputRef) => {\n                inputRef.disabled = currentField._f.disabled || disabled;\n              });\n            }\n          }\n        },\n        0,\n        false,\n      );\n    }\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      let onValidError = undefined;\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let fieldValues = cloneObject(_formValues);\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      if (_options.resolver) {\n        const { errors, values } = await _executeSchema();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuiltInValidation(_fields);\n      }\n\n      unset(_formState.errors, 'root');\n\n      if (isEmptyObject(_formState.errors)) {\n        _subjects.state.next({\n          errors: {},\n        });\n        try {\n          await onValid(fieldValues as TFieldValues, e);\n        } catch (error) {\n          onValidError = error;\n        }\n      } else {\n        if (onInvalid) {\n          await onInvalid({ ..._formState.errors }, e);\n        }\n        _focusError();\n        setTimeout(_focusError);\n      }\n\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors,\n      });\n      if (onValidError) {\n        throw onValidError;\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, cloneObject(get(_defaultValues, name)));\n      } else {\n        setValue(\n          name,\n          options.defaultValue as PathValue<\n            TFieldValues,\n            FieldPath<TFieldValues>\n          >,\n        );\n        set(_defaultValues, name, cloneObject(options.defaultValue));\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const _reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const isEmptyResetValues = isEmptyObject(formValues);\n    const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (keepStateOptions.keepDirtyValues) {\n        for (const fieldName of _names.mount) {\n          get(_formState.dirtyFields, fieldName)\n            ? set(values, fieldName, get(_formValues, fieldName))\n            : setValue(\n                fieldName as FieldPath<TFieldValues>,\n                get(values, fieldName),\n              );\n        }\n      } else {\n        if (isWeb && isUndefined(formValues)) {\n          for (const name of _names.mount) {\n            const field = get(_fields, name);\n            if (field && field._f) {\n              const fieldReference = Array.isArray(field._f.refs)\n                ? field._f.refs[0]\n                : field._f.ref;\n\n              if (isHTMLElement(fieldReference)) {\n                const form = fieldReference.closest('form');\n                if (form) {\n                  form.reset();\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        _fields = {};\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneObject(values);\n\n      _subjects.array.next({\n        values: { ...values },\n      });\n\n      _subjects.values.next({\n        values: { ...values },\n      });\n    }\n\n    _names = {\n      mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _state.mount =\n      !_proxyFormState.isValid ||\n      !!keepStateOptions.keepIsValid ||\n      !!keepStateOptions.keepDirtyValues;\n\n    _state.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: isEmptyResetValues\n        ? false\n        : keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : !!(\n            keepStateOptions.keepDefaultValues &&\n            !deepEqual(formValues, _defaultValues)\n          ),\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: isEmptyResetValues\n        ? []\n        : keepStateOptions.keepDirtyValues\n        ? keepStateOptions.keepDefaultValues && _formValues\n          ? getDirtyFields(_defaultValues, _formValues)\n          : _formState.dirtyFields\n        : keepStateOptions.keepDefaultValues && formValues\n        ? getDirtyFields(_defaultValues, formValues)\n        : keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n        ? _formState.isSubmitSuccessful\n        : false,\n      isSubmitting: false,\n    });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (formValues, keepStateOptions) =>\n    _reset(\n      isFunction(formValues)\n        ? formValues(_formValues as TFieldValues)\n        : formValues,\n      keepStateOptions,\n    );\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n    const fieldReference = field && field._f;\n\n    if (fieldReference) {\n      const fieldRef = fieldReference.refs\n        ? fieldReference.refs[0]\n        : fieldReference.ref;\n\n      if (fieldRef.focus) {\n        fieldRef.focus();\n        options.shouldSelect && fieldRef.select();\n      }\n    }\n  };\n\n  const _updateFormState = (\n    updatedFormState: Partial<FormState<TFieldValues>>,\n  ) => {\n    _formState = {\n      ..._formState,\n      ...updatedFormState,\n    };\n  };\n\n  const _resetDefaultValues = () =>\n    isFunction(_options.defaultValues) &&\n    _options.defaultValues().then((values) => {\n      reset(values, _options.resetOptions);\n      _subjects.state.next({\n        isLoading: false,\n      });\n    });\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      handleSubmit,\n      setError,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _updateDisabledField,\n      _getFieldArray,\n      _reset,\n      _resetDefaultValues,\n      _updateFormState,\n      _disableForm,\n      _subjects,\n      _proxyFormState,\n      _setErrors,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _state() {\n        return _state;\n      },\n      set _state(value) {\n        _state = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport deepEqual from './utils/deepEqual';\nimport isFunction from './utils/isFunction';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n  TTransformedValues extends FieldValues | undefined = undefined,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext, TTransformedValues> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext, TTransformedValues> | undefined\n  >();\n  const _values = React.useRef<typeof props.values>();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    isLoading: isFunction(props.defaultValues),\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    submitCount: 0,\n    dirtyFields: {},\n    touchedFields: {},\n    validatingFields: {},\n    errors: props.errors || {},\n    disabled: props.disabled || false,\n    defaultValues: isFunction(props.defaultValues)\n      ? undefined\n      : props.defaultValues,\n  });\n\n  if (!_formControl.current) {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n  control._options = props;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    next: (\n      value: Partial<FormState<TFieldValues>> & { name?: InternalFieldName },\n    ) => {\n      if (\n        shouldRenderFormState(\n          value,\n          control._proxyFormState,\n          control._updateFormState,\n          true,\n        )\n      ) {\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(\n    () => control._disableForm(props.disabled),\n    [control, props.disabled],\n  );\n\n  React.useEffect(() => {\n    if (control._proxyFormState.isDirty) {\n      const isDirty = control._getDirty();\n      if (isDirty !== formState.isDirty) {\n        control._subjects.state.next({\n          isDirty,\n        });\n      }\n    }\n  }, [control, formState.isDirty]);\n\n  React.useEffect(() => {\n    if (props.values && !deepEqual(props.values, _values.current)) {\n      control._reset(props.values, control._options.resetOptions);\n      _values.current = props.values;\n      updateFormState((state) => ({ ...state }));\n    } else {\n      control._resetDefaultValues();\n    }\n  }, [props.values, control]);\n\n  React.useEffect(() => {\n    if (props.errors) {\n      control._setErrors(props.errors);\n    }\n  }, [props.errors, control]);\n\n  React.useEffect(() => {\n    if (!control._state.mount) {\n      control._updateValid();\n      control._state.mount = true;\n    }\n\n    if (control._state.watch) {\n      control._state.watch = false;\n      control._subjects.state.next({ ...control._formState });\n    }\n\n    control._removeUnmounted();\n  });\n\n  React.useEffect(() => {\n    props.shouldUnregister &&\n      control._subjects.values.next({\n        values: control._getWatch(),\n      });\n  }, [props.shouldUnregister, control]);\n\n  _formControl.current.formState = getProxyFormState(formState, control);\n\n  return _formControl.current;\n}\n"],"names":["MutationObserver","_client","WeakMap","_currentResult","_currentMutation","_mutateOptions","_Class_brand","WeakSet","Subscribable","constructor","client","options","super","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_classPrivateFieldSet","this","setOptions","bindMethods","_assertClassBrand","_updateResult","call","mutate","bind","reset","_classPrivateFieldGet2","prevOptions","_classPrivateFieldGet","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","observer","mutationKey","hashKey","state","status","onUnsubscribe","_classPrivateFieldGet3","hasListeners","removeObserver","onMutationUpdate","action","_notify","getCurrentResult","_classPrivateFieldGet4","variables","_classPrivateFieldGet5","build","addObserver","execute","_classPrivateFieldGet6","_classPrivateFieldGet7","getDefaultState","isPending","isSuccess","isError","isIdle","notifyManager","batch","context","_classPrivateFieldGet8","_classPrivateFieldGet9","_classPrivateFieldGet10","_classPrivateFieldGet11","onSuccess","data","onSettled","_classPrivateFieldGet12","_classPrivateFieldGet13","_classPrivateFieldGet14","_classPrivateFieldGet15","onError","error","listeners","forEach","listener","useMutation","queryClient","useQueryClient","React","result","onStoreChange","subscribe","batchCalls","mutateOptions","catch","noop","shouldThrowError","throwOnError","mutateAsync","isCheckBoxInput","element","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","copy","Set","Blob","FileList","key","compact","filter","Boolean","isUndefined","val","undefined","get","object","path","defaultValue","split","reduce","isBoolean","isKey","test","stringToPath","input","replace","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","getProxyFormState","formState","control","localProxyFormState","isRoot","arguments","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","useSubscribe","props","_props","current","subscription","disabled","subject","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","appendErrors","validateAllFieldCriteria","errors","message","types","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","some","watchName","startsWith","slice","iterateFieldsByAction","fields","fieldsNames","abortEarly","field","_f","currentField","refs","ref","updateFieldArrayRootError","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","values","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","updatePath","baseGet","obj","isEmptyArray","createSubject","_observers","observers","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","_ref2","setValueAs","NaN","getFieldValue","files","selectedOptions","_ref3","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","_options","_formState","submitCount","isDirty","isLoading","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","validatingFields","_formValues","shouldUnregister","_state","unMount","array","timer","_subjects","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","_updateValid","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","from","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","_getWatch","fieldReference","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","concat","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","_focusInput","focus","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","invalid","setError","currentError","currentRef","restOfErrorTree","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","_updateDisabledField","_ref4","register","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","onValidError","e","preventDefault","persist","fieldValues","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","form","closest","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_removeUnmounted","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_getFieldArray","_resetDefaultValues","then","resetOptions","_updateFormState","_disableForm","_setErrors","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","select","useForm","_formControl","_values"],"sourceRoot":""}